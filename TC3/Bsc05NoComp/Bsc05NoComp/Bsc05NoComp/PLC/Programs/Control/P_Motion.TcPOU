<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="P_Motion" Id="{e2f87671-7351-4a5e-baec-94080915a986}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Motion
VAR
	fbSineMotionRefMain	: FB_SineMotionRef;
	fbSineMotionRefJib	: FB_SineMotionRef;
	
	fbRampMain			: FB_Ramp;
	fbRampJib			: FB_Ramp;

	fbHome	: FB_Homing;

	fbInitPosMain 		: FB_InitialPos;
	fbInitPosJib		: FB_InitialPos;
	
	fbIntegrator		: FB_Integrator;
	fbIntegratorMain	: FB_Integrator;
	fbIntegratorJib		: FB_Integrator;
	
	fbFlowShare			: FB_FlowSharing;
	fbSmart				: FB_Smart;
	
	bTest				: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbInitPosMain(
	bEnable := G_Enables.bHoldButton AND G_Enables.bEnableTwo,
	fCurrentPos := G_OPC.fMainPistonPosition.fDanielFilter
);

fbInitPosJib(
	bEnable := G_Enables.bHoldButton AND G_Enables.bEnableOne,
	fCurrentPos := G_OPC.fJibPistonPosition.fDanielFilter
);

fbSineMotionRefMain(
	fInitialPos := fbInitPosMain.fInitialPos,
	fTime := G_OPC.fMotionTime,
	fFrequency := G_Parameters.fMainFrequency,
	fAmplitude := G_Parameters.fMainAmplitude,
	fFlowShareCoff := fbFlowShare.fShareCoff
);

fbSineMotionRefJib(
	fInitialPos := fbInitPosJib.fInitialPos,
	fTime := G_OPC.fMotionTime,
	fFrequency := G_Parameters.fJibFrequency,
	fAmplitude := G_Parameters.fJibAmplitude,
	fFlowShareCoff := fbFlowShare.fShareCoff
);

fbRampMain(
	fTime := G_OPC.fMotionTime,
	fHeight := 0.01,
	fMaxSpeed := G_Parameters.fMaxSpeedMain
);

fbRampJib(
	fTime := G_OPC.fMotionTime,
	fHeight := 0.02,
	fMaxSpeed := G_Parameters.fMaxSpeedJib
);

G_Parameters.fMinWinchDist	:= ABS(G_Homing.aMinDistWinch[G_HMI.nHomingMode]);
G_Parameters.fMaxWinchDist	:= ABS(G_Homing.aMaxDistWinch[G_HMI.nHomingMode]);




IF G_HMI.bFlowShare THEN			
	fbFlowShare(
		fUAdjJib := G_OPC.fValveOneSignals.fUAdj,
		fUAdjMain := G_OPC.fValveTwoSignals.fUAdj,
		fMainAreaUp := G_Parameters.fAreaUpTwo,
		fMainAreaDown := G_Parameters.fAreaDownTwo,
		fJibAreaUp := G_Parameters.fAreaUpOne,
		fJibAreaDown := G_Parameters.fAreaDownOne,
		fCd := G_Parameters.fCd,
		fRho := G_Parameters.fRho,
		fMaxFlow := G_Parameters.fMaxFlow,
		fMainPa := G_OPC.fMainPaDCV.fDanielFilter,
		fMainPb := G_OPC.fMainPbDCV.fDanielFilter,
		fJibPa := G_OPC.fJibPaDCV.fDanielFilter,
		fJibPb := G_OPC.fJibPbDCV.fDanielFilter,
		fPs := G_OPC.fPs.fDanielFilter,
				
		fShareCoff => G_OPC.fFlowShareCoefficient,
		fFlowRef => G_OPC.fFlowRef
	);
ELSE
	G_OPC.fFlowShareCoefficient := 1.0;
END_IF

CASE G_HMI.nMotionMode OF
	E_Motion.Sine:
		G_Enables.bSineMotion := TRUE;
		G_Enables.bRampMotion := FALSE;
	E_Motion.Ramp:
		G_Enables.bSineMotion := FALSE;
		G_Enables.bRampMotion := TRUE;
END_CASE

IF G_Enables.bSineMotion AND NOT(G_Enables.bHoming) AND G_HMI.nHomingMode = 0 AND G_HMI.nMotionMode = 0 THEN
bTest := FALSE;
	fbIntegrator(
		ssMethodType := 1
	);
	
	fbSineMotionRefMain(
		bEnableMotion := G_Enables.bSineMotion AND G_Enables.bHoldButton AND G_Enables.bEnableTwo,
		
		fXDotRef => G_OPC.fXDotRefTwo,
		fXRef => G_OPC.fXRefTwo
	);
	
	fbSineMotionRefJib(
		bEnableMotion := G_Enables.bSineMotion AND G_Enables.bHoldButton AND G_Enables.bEnableOne,
		
		fXDotRef => G_OPC.fXDotRefOne,
		fXRef => G_OPC.fXRefOne
	);

ELSIF G_Enables.bRampMotion AND NOT(G_Enables.bHoming)  AND G_HMI.nMotionMode = 1 THEN

	IF G_Enables.bRampAxis THEN
		fbRampJib(
			bEnable := G_Enables.bRampMotion AND G_Enables.bHoldButton AND G_Enables.bEnableOne,
			fSignalStr := G_Parameters.fRampConstStrMain,
		
			fXDotRef => G_OPC.fXDotRefOne,
			fConst => G_OPC.fValveTwoSignals.fU
		);
		
		fbIntegratorJib(
			ssMethodType := TO_SINT(G_Enables.bRampMotion) * TO_SINT(G_OPC.fMotionTime > 0),
			fSignal := G_OPC.fXDotRefOne,
			fSignalIntegrated => G_Temp.fRampJibIntegrated
		);
		
		IF G_HMI.nHomingMode > 0 AND G_OPC.fMotionTime > 0 THEN
			G_OPC.fXRefOne := G_Homing.aHomingJib[G_HMI.nHomingMode - 1] + G_Temp.fRampJibIntegrated;
		END_IF
		
	ELSE
		
		fbRampMain(
			bEnable := G_Enables.bRampMotion AND G_Enables.bHoldButton AND G_Enables.bEnableTwo,
			fSignalStr := G_Parameters.fRampConstStrJib,
		
			fXDotRef => G_OPC.fXDotRefTwo,
			fConst => G_OPC.fValveOneSignals.fU
		);
		
		fbIntegratorMain(
			ssMethodType := TO_SINT(G_Enables.bRampMotion) * TO_SINT(G_OPC.fMotionTime > 0),
			fSignal := G_OPC.fXDotRefTwo,
			fSignalIntegrated => G_Temp.fRampMainIntegrated
		);
		
		IF G_HMI.nHomingMode > 0 AND G_OPC.fMotionTime > 0 THEN
			G_OPC.fXRefTwo := G_Homing.aHomingMain[G_HMI.nHomingMode - 1] + G_Temp.fRampMainIntegrated;
		END_IF
	END_IF
	
ELSIF G_Enables.bHoming AND NOT(G_Enables.bHoldButton) AND G_HMI.nHomingMode > 0 THEN
// Homing	
	fbHome(
		fWantedPositionMain := G_Homing.aHomingMain[G_HMI.nHomingMode - 1],
		fWantedPositionJib := G_Homing.aHomingJib[G_HMI.nHomingMode - 1],
		fCurrentPosMain := G_OPC.fMainPistonPosition.fDanielFilter,
		fCurrentPosJib := G_OPC.fJibPistonPosition.fDanielFilter,
		fClock := G_OPC.fHomingTime,
		bEnableHoming := G_Enables.bHoming,
		
		fXDotRefMain => G_OPC.fXDotRefTwo,
		fXDotRefJib => G_OPC.fXDotRefOne
	);
	
	G_OPC.fXRefOne := G_Homing.aHomingJib[G_HMI.nHomingMode - 1];
	G_OPC.fXRefTwo := G_Homing.aHomingMain[G_HMI.nHomingMode - 1];
	
ELSIF G_Enables.bHoldButton AND G_HMI.nHomingMode > 0 AND G_HMI.nMotionMode = 0 THEN
// Testing
	CASE G_HMI.nAutoMode OF
		E_AutoModes.Normal:
			
			G_Enables.bEnableOne := G_Homing.aJibMovement[G_HMI.nHomingMode - 1] AND G_Enables.bEnableThree;
			G_Enables.bEnableTwo := G_Homing.aMainMovement[G_HMI.nHomingMode - 1] AND G_Enables.bEnableThree;
			G_Enables.bEnableFlowShare := G_HMI.bFlowShare;
			
			fbSineMotionRefMain(
				bNegative := G_Homing.aNegMain[G_HMI.nHomingMode - 1],
				bCOS := G_Homing.aCosMain[G_HMI.nHomingMode - 1],
				bEnableMotion := G_Enables.bSineMotion AND G_Enables.bHoldButton AND G_Enables.bEnableTwo AND NOT(G_Enables.bHoming) AND G_Homing.aMainMovement[G_HMI.nHomingMode - 1],
			
				fXDotRef => G_OPC.fXDotRefTwo,
				fXRef => G_OPC.fXRefTwo
			);
					
			fbSineMotionRefJib(
				bNegative := G_Homing.aNegJib[G_HMI.nHomingMode - 1],
				bCOS := G_Homing.aCosJib[G_HMI.nHomingMode - 1],
				bEnableMotion := G_Enables.bSineMotion AND G_Enables.bHoldButton AND G_Enables.bEnableOne AND NOT(G_Enables.bHoming) AND G_Homing.aJibMovement[G_HMI.nHomingMode - 1],
				
				fXDotRef => G_OPC.fXDotRefOne,
				fXRef => G_OPC.fXRefOne
			);

			
		E_AutoModes.FlowSharing:
		
			G_Enables.bEnableOne := G_Homing.aJibMovement[G_HMI.nHomingMode - 1] AND G_Enables.bEnableThree;
			G_Enables.bEnableTwo := G_Homing.aMainMovement[G_HMI.nHomingMode - 1] AND G_Enables.bEnableThree;
			G_Enables.bEnableFlowShare := G_HMI.bFlowShare;
			
			fbSineMotionRefMain(
				bNegative := G_Homing.aNegMain[G_HMI.nHomingMode - 1],
				bCOS := G_Homing.aCosMain[G_HMI.nHomingMode - 1],
				bEnableMotion := G_Enables.bSineMotion AND G_Enables.bHoldButton AND G_Enables.bEnableTwo AND NOT(G_Enables.bHoming) AND G_Homing.aMainMovement[G_HMI.nHomingMode - 1],
			
				fXDotRef => G_OPC.fXDotRefTwo,
				fXRef => G_OPC.fXRefTwo
			);
					
			fbSineMotionRefJib(
				bNegative := G_Homing.aNegMain[G_HMI.nHomingMode - 1],
				bCOS := G_Homing.aCosMain[G_HMI.nHomingMode - 1],
				bEnableMotion := G_Enables.bSineMotion AND G_Enables.bHoldButton AND G_Enables.bEnableOne AND NOT(G_Enables.bHoming) AND G_Homing.aJibMovement[G_HMI.nHomingMode - 1],
				
				fXDotRef => G_OPC.fXDotRefOne,
				fXRef => G_OPC.fXRefOne
			);
			
	
	END_CASE
ELSE
	
	G_OPC.fXDotRefOne := 0.0;
	G_OPC.fXRefOne := G_OPC.fJibPistonPosition.fDanielFilter;
	
	G_OPC.fXDotRefTwo := 0.0;
	G_OPC.fXRefTwo := G_OPC.fMainPistonPosition.fDanielFilter;
	
	fbSineMotionRefMain(
		bEnableMotion := FALSE
		);
	fbSineMotionRefJib(
		bEnableMotion := FALSE
		);
END_IF



]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>