<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="P_Motion" Id="{e2f87671-7351-4a5e-baec-94080915a986}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Motion
VAR
	fbSineMotionRefMain	: FB_SineMotionRef;
	fbSineMotionRefJib	: FB_SineMotionRef;
	
	fbHomingMainTest	: FB_Homing;
	fbHomingJibTest		: FB_Homing;
	fbHomingWinchTest	: FB_Homing;
	fbHomingDualTest	: FB_Homing;
	
	fbInitPosMain 		: FB_InitialPos;
	fbInitPosJib		: FB_InitialPos;
	
	fbIntegrator		: FB_Integrator;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbSineMotionRefMain(
	fInitialPos := fbInitPosMain.fInitialPos
);

fbSineMotionRefJib(
	fInitialPos := fbInitPosJib.fInitialPos
);

fbInitPosMain(
	bEnable := G_Enables.bHoldButton AND G_Enables.bEnableTwo,
	fCurrentPos := G_OPC.fMainPistonPosition.fDanielFilter
);

fbInitPosJib(
	bEnable := G_Enables.bHoldButton AND G_Enables.bEnableOne,
	fCurrentPos := G_OPC.fJibPistonPosition.fDanielFilter
);



IF G_Enables.bSineMotion AND G_Enables.bHoldButton THEN
	fbSineMotionRefMain(
		bEnableMotion := G_Enables.bSineMotion AND G_Enables.bHoldButton AND NOT(G_Enables.bHoming),
		fTime := G_OPC.fMotionTime,
		fFrequency := G_Parameters.fMainFrequency,
		fAmplitude := G_Parameters.fMainAmplitude,
		
		fXDotRef => G_OPC.fXDotRefTwo,
		fXRef => G_OPC.fXRefTwo
	);
	
	fbSineMotionRefJib(
		bEnableMotion := G_Enables.bSineMotion AND G_Enables.bHoldButton AND NOT(G_Enables.bHoming),
		fTime := G_OPC.fMotionTime,
		fFrequency := G_Parameters.fJibFrequency,
		fAmplitude := G_Parameters.fJibAmplitude,
		
		fXDotRef => G_OPC.fXDotRefOne,
		fXRef => G_OPC.fXRefOne
	);
	
ELSIF G_Enables.bHoming AND NOT(G_Enables.bHoldButton) THEN
	
	IF G_HMI.bHomingMainTest THEN
	
		fbHomingMainTest(
			fWantedPositionMain := G_Homing.fHomingMain[0],
			fCurrentPosMain := G_OPC.fMainPistonPosition.fDanielFilter,
			fWantedPositionJib := G_Homing.fHomingJib[0],
			fCurrentPosJib := G_OPC.fJibPistonPosition.fDanielFilter,
			fClock := G_OPC.fHomingTime,
			bEnableHoming := G_Enables.bHoming,
		
			fXDotRefMain => G_OPC.fXDotRefTwo,
			fXDotRefJib => G_OPC.fXDotRefOne
		);
		
		G_OPC.fXRefOne := G_Homing.fHomingJib[0];
		G_OPC.fXRefTwo := G_Homing.fHomingMain[0];
		
	ELSIF G_HMI.bHomingJibTest THEN
		
		fbHomingJibTest(
			fWantedPositionMain := G_Homing.fHomingMain[1],
			fCurrentPosMain := G_OPC.fMainPistonPosition.fDanielFilter,
			fWantedPositionJib := G_Homing.fHomingJib[1],
			fCurrentPosJib := G_OPC.fJibPistonPosition.fDanielFilter,
			fClock := G_OPC.fHomingTime,
			bEnableHoming := G_Enables.bHoming,
		
			fXDotRefMain => G_OPC.fXDotRefTwo,
			fXDotRefJib => G_OPC.fXDotRefOne
		);
		
		G_OPC.fXRefOne := G_Homing.fHomingJib[1];
		G_OPC.fXRefTwo := G_Homing.fHomingMain[1];
		
	ELSIF G_HMI.bHomingWinchTest THEN
		
		fbHomingWinchTest(
			fWantedPositionMain := G_Homing.fHomingMain[2],
			fCurrentPosMain := G_OPC.fMainPistonPosition.fDanielFilter,
			fWantedPositionJib := G_Homing.fHomingJib[2],
			fCurrentPosJib := G_OPC.fJibPistonPosition.fDanielFilter,
			fClock := G_OPC.fHomingTime,
			bEnableHoming := G_Enables.bHoming,
		
			fXDotRefMain => G_OPC.fXDotRefTwo,
			fXDotRefJib => G_OPC.fXDotRefOne
		);
		
		G_OPC.fXRefOne := G_Homing.fHomingJib[2];
		G_OPC.fXRefTwo := G_Homing.fHomingMain[2];
		
	ELSIF G_HMI.bHomingDualTest THEN
		
		fbHomingDualTest(
			fWantedPositionMain := G_Homing.fHomingMain[3],
			fCurrentPosMain := G_OPC.fMainPistonPosition.fDanielFilter,
			fWantedPositionJib := G_Homing.fHomingJib[3],
			fCurrentPosJib := G_OPC.fJibPistonPosition.fDanielFilter,
			fClock := G_OPC.fHomingTime,
			bEnableHoming := G_Enables.bHoming,
		
			fXDotRefMain => G_OPC.fXDotRefTwo,
			fXDotRefJib => G_OPC.fXDotRefOne
		);
		
		G_OPC.fXRefOne := G_Homing.fHomingJib[3];
		G_OPC.fXRefTwo := G_Homing.fHomingMain[3];
		
	END_IF
	
ELSE
	
	G_OPC.fXDotRefOne := 0.0;
	G_OPC.fXRefOne := G_OPC.fJibPistonPosition.fDanielFilter;
	
	G_OPC.fXDotRefTwo := 0.0;
	G_OPC.fXRefTwo := G_OPC.fMainPistonPosition.fDanielFilter;
	
END_IF

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>